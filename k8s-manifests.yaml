# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: xmlsign
---
# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: xmlsign
data:
  SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-service:5432/xmlsign_db"
  SPRING_DATASOURCE_USERNAME: "postgres"
  # Use relative path for client-side API calls
  NEXT_PUBLIC_API_URL: "/api"
  # Internal API URL for server-side proxy
  INTERNAL_API_URL: "http://springboot-service:8080"
---
# xmlsign_db_dump.sql ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: xmlsign-db-dump
  namespace: xmlsign
data:
  xmlsign_db_dump.sql: |
    # Paste the full contents of xmlsign_db_dump.sql here, preserving indentation
---
# secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: xmlsign
type: Opaque
data:
  # Base64 encoded values
  POSTGRES_PASSWORD: QWRlbG1hc2tvdDI1  # Adelmaskot25
  TUNNEL_TOKEN: ZXlKaElqb2laVEEyWm1GalltRTNZakE0TURaalpXVTRaR0k1T1RreE16WXlaV0V6TjJZaUxDSjBJam9pWXpVMU5UVTJOMlkxTFRobFlUSXRORFJtTUMxaVptRTJMVE01WVdKaE5EVXpaRFEyTkNJc0luTWlPaUpOUkVrMVRWZE5NV1kxVFVkSlZDMU5SR2xtWWkwME5HWjNMV0k1WkVoMFdHUmpaelptWmtJMVRqZE5lQ0o5  # Your tunnel token
---
# postgres-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: xmlsign
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: xmlsign
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: "xmlsign_db"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: xmlsign-db-dump
---
# postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: xmlsign
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
# springboot-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  namespace: xmlsign
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
    spec:
      containers:
      - name: springboot-app
        image: iconesigndocker-springboot-app:v1.0.1
        imagePullPolicy: Never
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: temp-download
          mountPath: /app/temp/download
        - name: certificates
          mountPath: /src/main/resources/certificates
      volumes:
      - name: temp-download
        hostPath:
          path: /tmp/temp/download
          type: DirectoryOrCreate
      - name: certificates
        hostPath:
          path: /tmp/certificates
          type: DirectoryOrCreate
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup postgres-service; do echo waiting for postgres; sleep 2; done;']
---
# springboot-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
  namespace: xmlsign
spec:
  selector:
    app: springboot-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# nextjs-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextjs-app
  namespace: xmlsign
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nextjs-app
  template:
    metadata:
      labels:
        app: nextjs-app
    spec:
      containers:
      - name: nextjs-app
        image: iconesigndocker-nextjs-app
        imagePullPolicy: Never
        env:
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NEXT_PUBLIC_API_URL
        # Add internal API URL for server-side proxy
        - name: INTERNAL_API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: INTERNAL_API_URL
        ports:
        - containerPort: 3000
      initContainers:
      - name: wait-for-springboot
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup springboot-service; do echo waiting for springboot; sleep 2; done;']
---
# nextjs-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nextjs-service
  namespace: xmlsign
spec:
  selector:
    app: nextjs-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer  # Kind will make this accessible via port-forward or ingress
---
# cloudflared-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: xmlsign
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudflared
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: TUNNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: TUNNEL_TOKEN
        command:
        - "cloudflared"
        - "tunnel"
        - "--no-autoupdate"
        - "--url"
        - "http://nextjs-service:3000"
        ports:
        - containerPort: 8081
      initContainers:
      - name: wait-for-nextjs
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup nextjs-service; do echo waiting for nextjs; sleep 2; done;']