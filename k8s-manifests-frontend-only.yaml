# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: xmlsign
---
# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: xmlsign
data:
  SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-service:5432/xmlsign_db"
  SPRING_DATASOURCE_USERNAME: "postgres"
  # Use relative path for client-side API calls
  NEXT_PUBLIC_API_URL: "/api"
  # Internal API URL for server-side proxy (backend is internal only)
  INTERNAL_API_URL: "http://springboot-service:8080"
---
# secret.yaml - SECRETS CREATED BY SETUP SCRIPT
# Note: This secret will be created by the setup script with proper values
---
# postgres-pvc.yaml - Using emptyDir for local development
# For production, replace with proper PVC with storageClassName
---
# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: xmlsign
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: "xmlsign_db"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
# postgres-service.yaml (ClusterIP - internal only)
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: xmlsign
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
# springboot-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  namespace: xmlsign
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
    spec:
      containers:
      - name: springboot-app
        image: iconesigndocker-springboot-app:v1.0.1
        imagePullPolicy: Never
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup postgres-service; do echo waiting for postgres; sleep 2; done;']
---
# springboot-service.yaml (ClusterIP - internal only)
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
  namespace: xmlsign
spec:
  selector:
    app: springboot-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# nextjs-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextjs-app
  namespace: xmlsign
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nextjs-app
  template:
    metadata:
      labels:
        app: nextjs-app
    spec:
      containers:
      - name: nextjs-app
        image: iconesigndocker-nextjs-app
        imagePullPolicy: Never
        env:
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NEXT_PUBLIC_API_URL
        # Add internal API URL for server-side proxy
        - name: INTERNAL_API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: INTERNAL_API_URL
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
      initContainers:
      - name: wait-for-springboot
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup springboot-service; do echo waiting for springboot; sleep 2; done;']
---
# nextjs-service.yaml (ClusterIP - will be accessed via Cloudflare tunnel only)
apiVersion: v1
kind: Service
metadata:
  name: nextjs-service
  namespace: xmlsign
spec:
  selector:
    app: nextjs-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
# cloudflared-deployment.yaml - FRONTEND ONLY EXPOSURE
# Using token-based tunnel configuration (no config file needed)
# Configure hostname routing in Cloudflare dashboard for your tunnel
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: xmlsign
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudflared
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: TUNNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: TUNNEL_TOKEN
        command:
        - "cloudflared"
        - "tunnel"
        - "--no-autoupdate"
        - "--metrics"
        - "0.0.0.0:2000"
        - "run"
        - "--token"
        - "$(TUNNEL_TOKEN)"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /ready
            port: 2000
          initialDelaySeconds: 10
          periodSeconds: 10
      initContainers:
      - name: wait-for-nextjs
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup nextjs-service; do echo waiting for nextjs; sleep 2; done;']